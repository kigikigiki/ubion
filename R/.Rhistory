df_1
df_1 = bind_rows(a,b)
df_1$score = ifelse(is.na(df_1$score), mean(df_1$score, na.rm=T), df_1$score)
df_1
df_1$score = ifelse(is.na(df_1$score), 0, df_1$score)
df_1
df_1$score = ifelse(is.na(df_1$score), 0, df_1$score)
df_1
df_1 = bind_rows(a,b)
df_1$score = ifelse(is.na(df_1$score), 0, df_1$score)
df_1
boxplot(df_1)
View(df_1)
View(df_1)
boxplot(df_1$score)
a = data.frame(id = c(1,2,3,4,5), score = c(60,80,70,90,85))
b = data.frame(id = c(3,4,5,6,7), weight = c(80,90,85,60,85))
df_1 = bind_rows(a,b)
df_1$score = ifelse(is.na(df_1$score), mean(df_1$score), df_1$score)
df_1
df_1$score = ifelse(is.na(df_1$score), mean(df_1$score), df_1$score)
df_1
df_1$score = ifelse(is.na(df_1$score), mean(df_1$score), df_1$score)
df_1
df_1$score = ifelse(is.na(df_1$score), mean(df_1$score, na.rn = T), df_1$score)
df_1
df_1$score = ifelse(is.na(df_1$score), mean(df_1$score, na.rm = T), df_1$score)
df_1
boxplot(df_1$score)
#시각화
install.packages(ggplot2)
#시각화
install.packages(ggplot)
#시각화
install.packages("ggplot2")
ggplot(data = mpg, aes(x = displ, y = hwy))
ggplot2(data = mpg, aes(x = displ, y = hwy))
library(ggplot2)
ggplot(data = mpg, aes(x = displ, y = hwy))
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
mpg = ggplot::mpg
mpg = ggplot2::mpg
library(ggplot2)
mpg = ggplot2::mpg
library(dplyr)
df_mpg - mpg %>% group_by(drv) %>% summarise(mean_hwy = mean(hwy))
df_mpg = mpg %>% group_by(drv) %>% summarise(mean_hwy = mean(hwy))
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
wd
library(dplyr)
setwd("~/ubion")
setwd("~/ubion/R")
getwd()
## 현재 디렉토리에서 상위 디렉토리로 이동 (../) - csv라는 하위 디렉토리 이동 (csv)
read.csv(../csv/example.csv)
## 현재 디렉토리에서 상위 디렉토리로 이동 (../) - csv라는 하위 디렉토리 이동 (csv)
read.csv(../csv/example.csv)
## 현재 디렉토리에서 상위 디렉토리로 이동 (../) - csv라는 하위 디렉토리 이동 (csv)
read.csv('../csv/example.csv')
## 현재 디렉토리에서 상위 디렉토리로 이동 (../) - csv라는 하위 디렉토리 이동 (csv)
df = read.csv('../csv/example.csv')
df
df2 = read.csv('C:\Users\hyungjun\OneDrive\document\ubion\csv')
df2 = read.csv('C:/Users/hyungjun/OneDrive/document/ubion/csv')
df2 = read.csv('C:/Users/hyungjun/OneDrive/document/ubion/csv/example.csv')
df2
df2 = read.csv('C:/Users/hyungjun/OneDrive/document/ubion/csv/example.csv')
df2
##head(데이터 프레임명, 개수) : 데이터프레임 상위 n개를 출력
df %>% head(3)
## 인덱스의 조건식으로 필터링
## filter(조건식)
df %>% filter(gender == 'male')
## 인덱스의 조건식으로 필터링
## filter(조건식)
df %>% filter(Gender == 'male')
## base 함수로 필터링
## 조건식을 생성
df$Gender == 'male'
## base 함수로 필터링
## 조건식을 생성
flag = df$Gender == 'male'
df[flag,]
##특정컬럼의 데이터만 출력
df %>% select('Name', 'Phone')
df["Name"]
df["Name", "Phone"]
df["Name" | "Phone"]
df %>% select(-Gender)
##base 함수로 필터링
df[['Name'], ['Phone']]
##base 함수로 필터링
df[['Name'] ['Phone']]
##base 함수로 필터링
df[['Name']]
##base 함수로 필터링
df[Name]
##base 함수로 필터링
df["Name"]
##base 함수로 필터링
df[1]
##base 함수로 필터링
df[1,3]
##base 함수로 필터링
df[1][3]
##base 함수로 필터링
df['Name' & 'Phone']
##base 함수로 필터링
df[,'Name']
##base 함수로 필터링
df[,['Name'],['Phone']]
##base 함수로 필터링
df[,['Name','Phone']]
##base 함수로 필터링
df[c('Name','Phone')]
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
flag = df$Gender == 'male'
df[flag,c('Name', 'Phone')]
##특정컬럼의 데이터만 출력
df %>% select(Name, Phone)
df
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
df %>% filter(Gender == 'male') %>% select(Name, Phone)
flag = df$Gender == 'male'
df[flag,c('Name', 'Phone')]
## base 함수로 필터링
df[c('Name','Phone')]
exam = read.csv('../csv/csv_exam.csv')
df3
exam
## 차순 정렬 변경 (오름차순 / 내림차순)
## 수학 성적을 기준으로 오름차순 정렬
exam %>% arrange(math)
## 수학 성적을 기준으로 내림차순 정렬
exam %>% arrang(desc(math))
## 수학 성적을 기준으로 내림차순 정렬
exam %>% arrange(desc(math))
exam %>% arrange(-math)
## base 함수
order(exam$math,)
## base 함수
order(exam$math)
## base 함수
exam[order(exam$math),]
## base 함수
exam[order(exam$math),decresing = TRUE]
## base 함수
exam[order(exam$math),decreasing = TRUE]
## base 함수
exam[order(exam$math,decreasing = TRUE)]
## base 함수
exam[order(exam$math,decreasing = TRUE),]
## base 함수
flag2 = order(exam$math)
exam[flag2,]
flag3 = order(exam$math, decreasing = TRUE)
exam[flag3,]
## 정렬 방식의 조건이 2개 이상인 경우
exam %>% arrange(class) %>% arrange(math)
## 정렬 방식의 조건이 2개 이상인 경우
exam %>% arrange(desc(class),math)
exam %>%
arrange(by_group = TRUE,math)
group_by(exam, class)
group_by(exam, class)
exam %>%
group_by(class) %>%
summarise(
mean_math = mean(math),
mean_science = mean(science),
mean_english = mean(english)
)
## 유니언 결합
df_1 = data.frame(
id = 1:5,
score = c(70, 80, 65, 80, 90)
)
df_2 = data.frame(
id = 3:6,
score = c(60, 50, 70, 80)
)
df_2 = data.frame(
id = 3:6,
weight = c(60, 50, 70, 80)
)
rbind(df_1, df_2)
bind_rows(df_1, df_2)
df_3 = data.frame(
id = 3:8,
score = c(50, 70, 80, 70, 90, 50)
)
#데이터 구조가 같아서 결합이 정상적으로 이뤄짐
rbind(df_1, df_3)
#데이터 구조가 일치하지 않아서 에러가 남
rbind(df_1, df_2)
bind_rows(df_1, df_2)
bind_rows(df_1, df_2, df_3)
## 조인결합
## 특정한 조건이 참인 경우 컬럼의 데이터를 추가
df_4 = data.frame(
id = c('test', 'test2', 'test3', 'test4'),
item = c('A', 'B', 'B', 'D')
)
df_5 = data.frame(
item = c('A', 'B'),
price = c(1000, 2000)
)
df_5 = data.frame(
item = c('A', 'B', 'C'),
price = c(1000, 2000, 3000)
)
## 조인결합
## 특정한 조건이 참인 경우 컬럼의 데이터를 추가
df_4 = data.frame(
id = c('test', 'test2', 'test3', 'test4'),
item = c('A', 'B', 'B', 'D')
)
df_5 = data.frame(
item = c('A', 'B', 'C'),
price = c(1000, 2000, 3000)
)
inner_join(df_4, df_5)
full_join((df_4, df_5))
full_join(df_4, df_5)
right_join(df_4, df_5)
left_join(df_4, df_5)
inner_join(df_4, df_5)
right_join(df_4, df_5)
left_join(df_4, df_5)
full_join(df_4, df_5)
inner_join(df_4, df_5, by = 'item')
inner_join(df_4, df_5, by = 'id')
inner_join(df_4, df_5, by = 'item')
library('ggplot2')
## ggplot2 패키지 안에 샘플데이터를 로드
midwest = ggplot2 ::
students %>% arrange(midturm)
## ggplot2 패키지 안에 샘플데이터를 로드
midwest = ggplot2 ::
students %>% arrange(midturm)
## ggplot2 패키지 안에 샘플데이터를 로드
midwest = ggplot2 :: midwest
head(midwest, 3)
info(midwest, 3)
str(midwest, 3)
View(midwest)
## 컬럼의 이름을 변경
## rename(데이터프레임명, 새컬럼명 = 변경할 컬럼 명)
## popasian 컬럼을 asian
## poptotal 칼럼을 total
rename(midwest, asian = popasian)
rename(midswest, poptotal = total)
rename(midwest, poptotal = total)
## 컬럼의 이름을 변경
## rename(데이터프레임명, 새컬럼명 = 변경할 컬럼 명)
## popasian 컬럼을 asian
## poptotal 칼럼을 total
midwest = rename(midwest, asian = popasian)
rename(midwest, total = poptotal)
midwest = rename(midwest, total = poptotal)
midwest
# 복사본 생성 (midwest에서 country, asian, total 데이터만 추출하여 저장)
midwest %>% select(country, asian, total)
# 복사본 생성 (midwest에서 country, asian, total 데이터만 추출하여 저장)
midwest %>% select(county, asian, total)
midwest[c('county', 'asian', 'total')]
# 복사본 생성 (midwest에서 country, asian, total 데이터만 추출하여 저장)
midwest1 = midwest %>% select(county, asian, total)
midwest[c('county', 'asian', 'total')]
midwest1
View(df)
midwest1$ratio = midwest1$asian/midwest1$total * 100
midwest1
midwest1$asian/midwest1$total * 100
bind_cols(df,ratio)
# 복사본 생성 (midwest에서 country, asian, total 데이터만 추출하여 저장)
ratio = midwest %>% select(county, asian, total)
bind_cols(df,ratio)
# 복사본 생성 (midwest에서 country, asian, total 데이터만 추출하여 저장)
df = midwest %>% select(county, asian, total)
ratio=midwest[c('county', 'asian', 'total')]
bind_cols(df,ratio)
bind_cols(df,ratio)
# 복사본 생성 (midwest에서 country, asian, total 데이터만 추출하여 저장)
df = NULL
df = midwest %>% select(county, asian, total)
ratio=midwest[c('county', 'asian', 'total')]
bind_cols(df,ratio)
df = midwest[c('county', 'asian', 'total')]
df
ratio = df$asian/df$total * 100
bind_cols(df,ratio)
bind_cols(df,ratio = ratio)
cbind(df, ratio)
data.frame(df, ratio)
df2 = midwest[c('county', 'asian', 'total')]
##mutate() : 파생변수 생성 함수
df2 %>%
mutate(ratio = (asian / total) * 100)
## 히스토그램
## hist(백터데이터)
hist(df$ratio)
## 결합하는 방법 3가지
df = bind_cols(df,ratio = ratio)
## 히스토그램
## hist(백터데이터)
hist(df$ratio)
## 전체 ratio의 평균값을 출력
mean(df$ratio)
## 전체 ratio의 평균값을 출력
mean_ratio = mean(df$ratio)
## mean_ratio와 ratio 데이터를 비교하여
## 평균 값보다 높은 경우 large,
## 평균값보다 이하인 경우 small
## group 컬럼명에 추가
df$group = ifelse(ratio>mean_ratio, 'large', 'small')
df
hist(df$group)
boxplot(df$group)
count(df$group)
table(df$group)
## mean_ratio와 ratio 데이터를 비교하여
## 평균 값보다 높은 경우 large,
## 평균값보다 이하인 경우 small
## group 컬럼명에 추가
df$group = ifelse(df$ratio > mean_ratio, 'large', 'small')
table(df$group)
## mean_ratio와 ratio 데이터를 비교하여
## 평균 값보다 높은 경우 large,
## 평균값보다 이하인 경우 small
## group 컬럼명에 추가
#df$group =
ifelse(df$ratio > mean_ratio, 'large', 'small')
## mean_ratio와 ratio 데이터를 비교하여
## 평균 값보다 높은 경우 large,
## 평균값보다 이하인 경우 small
## group 컬럼명에 추가
df$group =
ifelse(df$ratio > mean_ratio, 'large', 'small')
table(df$group)
## mean_ratio와 ratio 데이터를 비교하여
## 평균 값보다 높은 경우 large,
## 평균값보다 이하인 경우 small
## group 컬럼명에 추가
flag4 = df$ratio > mean_ratio
ifelse(flag, 'large', 'small')
ifelse(flag4, 'large', 'small')
df$group =
ifelse(flag4, 'large', 'small')
table(df$group)
## 패키지 이용하여 컬럼 추가
df %>%
mutate(group = ifelse(ratio>mean(ratio), 'large', 'small'))
table(df)
table(df$county)
## 패키지 이용하여 컬럼 추가
df = df %>%
mutate(group = ifelse(ratio>mean(ratio),
'large',
'small'
)
)
table(df$group)
midwest = ggplot2::midwest
rename(midwest, adult = popadult)
midwest
View(midwest)
View(midwest)
rename(midwest, adult = popadults)
rename(midwest, total = poptotal)
midwest
midwest
rename(midwest, adult = popadults)
rename(midwest, total = poptotal)
midwest
midwest = rename(midwest, total = poptotal)
midwest = rename(midwest, adult = popadults)
midwest
df = df %>% select(county, adult, total)
midwest = rename(midwest, adult = popadults)
midwest = rename(midwest, total = poptotal)
df = df %>% select(county, adult, total)
df = midwest %>% select(county, adult, total)
df
df$child =
df %>% select(child = total - adult)
df$child =
df %>% select(child = total - adult)
df
df$child = df$total - df$adult
df
df$child_ratio = df$child/df$total
df
df$child_ratio = df$child/df$total * 100
df
order(df$child_ratio)
head(df(order(df$child_ratio)),5)
df %>% arrange(child_ratio)
df %>% arrange(decs(child_ratio))
df %>% arrange(desc(child_ratio))
source("~/ubion/R/240205_연습.R", encoding = 'UTF-8', echo=TRUE)
df %>% arrange(desc(child_ratio)) %>% head(5)
df %>% head(arrange(desc(child_ratio)),5)
df$child_ratio = df$child/df$total * 100
midwest = ggplot2::midwest
midwest
midwest = rename(midwest, adult = popadults)
midwest = rename(midwest, total = poptotal)
df = midwest %>% select(county, adult, total)
df$child = df$total - df$adult
df$child_ratio = df$child/df$total * 100
df
df %>% head(arrange(desc(child_ratio)),5)
df %>% head(arrange(desc(child_ratio)))
df %>% head(5)
df_1 %>% df %>% arrange(desc(child_ratio)
df_1 %>% df %>% arrange(desc(child_ratio))
df_1 = df %>% arrange(desc(child_ratio))
head(df_1,5)
order(df$child_ratio,decreasing = TRUE)
order(df$child_ratio,decreasing = TRUE) -> flag
## Base 함수들을 이용해서 작업
## 칼럼의 이름을 변경
midwest = ggplot2 :: midwest
rename(midwest, adult = popadults)
rename(midwest, total = poptotal)
midwest = rename(midwest, adult = popadults)
midwest = rename(midwest, total = poptotal)
## county, adult, total 칼럼만 따로 추출하여 변수에 저장
df = midwest[c("county", "adult", "total")]
df
## child 칼럼을 추가하여 total - adult 데이터를 추가
df$child = df$total - df$adult
df
## child_ratio 칼럼을 추가하여 child / total * 100 데이터를 추가
df$child_ratio = df$child / df$total * 100
df
## child_ratio 칼럼을 높은 상위 5개의 지역을 출력한다.
## child_ratio 내림차순 정렬
## 상위 5개 지역을 출력
order(df$child_ratio, decreasing = TRUE)
## child_ratio 칼럼을 높은 상위 5개의 지역을 출력한다.
## child_ratio 내림차순 정렬
## 상위 5개 지역을 출력
df = order(df$child_ratio, decreasing = TRUE)
df
## Base 함수들을 이용해서 작업
## 칼럼의 이름을 변경
midwest = ggplot2 :: midwest
midwest = rename(midwest, adult = popadults)
midwest = rename(midwest, total = poptotal)
## county, adult, total 칼럼만 따로 추출하여 변수에 저장
df = midwest[c("county", "adult", "total")]
## child 칼럼을 추가하여 total - adult 데이터를 추가
df$child = df$total - df$adult
## child_ratio 칼럼을 추가하여 child / total * 100 데이터를 추가
df$child_ratio = df$child / df$total * 100
## child_ratio 칼럼을 높은 상위 5개의 지역을 출력한다.
## child_ratio 내림차순 정렬
## 상위 5개 지역을 출력
flag = order(df$child_ratio, decreasing = TRUE)
df[flag,]
df[flag,5]
df[flag,[5]]
df = df[flag,]
## 상위 5개 지역을 출력
head(df, 5)
midwest = ggplot2 :: midwest
midwest %>%
rename(adult = popadults)
midwest %>%
rename(adult = popadults, total = poptotal)
midwest %>%
rename(adult = popadults, total = poptotal) %>%
select(county, adult, total)
midwest %>%
rename(adult = popadults, total = poptotal) %>%
select(county, adult, total) %>%
mutate(child = total - adult, child_ratio = child / total * 100)
midwest %>%
rename(adult = popadults, total = poptotal) %>%
select(county, adult, total) %>%
mutate(child = total - adult, child_ratio = child / total * 100) %>%
arrange(dec(child_ratio))
midwest %>%
rename(adult = popadults, total = poptotal) %>%
select(county, adult, total) %>%
mutate(child = total - adult, child_ratio = child / total * 100) %>%
arrange(desc(child_ratio))
source("~/ubion/R/240205_연습.R", encoding = 'UTF-8', echo=TRUE)
midwest %>%
rename(adult = popadults, total = poptotal) %>%
select(county, adult, total) %>%
mutate(child = total - adult, child_ratio = child / total * 100) %>%
arrange(desc(child_ratio)) %>%
head(midwest,5)
midwest = ggplot2 :: midwest
midwest %>%
rename(adult = popadults, total = poptotal) %>%
select(county, adult, total) %>%
mutate(child = total - adult, child_ratio = child / total * 100) %>%
arrange(desc(child_ratio)) %>%
head(midwest,5)
midwest %>%
rename(adult = popadults, total = poptotal) %>%
select(county, adult, total) %>%
mutate(child = total - adult, child_ratio = child / total * 100) %>%
arrange(desc(child_ratio)) %>%
head(5)
source("~/ubion/R/240205_연습.R", encoding = 'UTF-8', echo=TRUE)
